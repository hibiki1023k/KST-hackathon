/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
            responses: {
                /** @description User created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["User"];
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user-data/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user data */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User data found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserData"];
                    };
                };
                /** @description User data not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update user data */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserDataUpdate"];
                };
            };
            responses: {
                /** @description User data updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserData"];
                    };
                };
                /** @description User data not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/technology-stacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all technology stacks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of technology stacks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TechnologyStack"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new technology stack */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TechnologyStackCreate"];
                };
            };
            responses: {
                /** @description Technology stack created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TechnologyStack"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/technology-stacks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user's technology stacks */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User's technology stacks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserTechnologyStack"][];
                    };
                };
            };
        };
        put?: never;
        /** Add technology stack to user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    userId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserTechnologyStackCreate"];
                };
            };
            responses: {
                /** @description Technology stack added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserTechnologyStack"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all hackathons */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of hackathons */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Hackathon"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new hackathon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["HackathonCreate"];
                };
            };
            responses: {
                /** @description Hackathon created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Hackathon"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons/{hackathonId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get hackathon by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Hackathon found */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Hackathon"];
                    };
                };
                /** @description Hackathon not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        /** Update hackathon */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["HackathonUpdate"];
                };
            };
            responses: {
                /** @description Hackathon updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Hackathon"];
                    };
                };
                /** @description Hackathon not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons/{hackathonId}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all teams for a hackathon */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of teams */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new team for a hackathon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TeamCreate"];
                };
            };
            responses: {
                /** @description Team created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{teamId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get team members */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Team members retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"][];
                    };
                };
            };
        };
        put?: never;
        /** Add a member to team */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TeamMemberCreate"];
                };
            };
            responses: {
                /** @description Team member added successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons/{hackathonId}/prizes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all prizes for a hackathon */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of prizes */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Prize"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new prize for a hackathon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PrizeCreate"];
                };
            };
            responses: {
                /** @description Prize created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Prize"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description A list of products */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Product"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons/{hackathonId}/teams/{teamId}/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get team's products for a hackathon */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                    teamId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Team's products */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Product"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new product for a team in a hackathon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                    teamId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProductCreate"];
                };
            };
            responses: {
                /** @description Product created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Product"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}/questions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get questions for a product */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product questions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Question"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a new question for a product */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["QuestionCreate"];
                };
            };
            responses: {
                /** @description Question created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Question"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questions/{questionId}/replies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get replies to a question */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    questionId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Question replies */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Question"][];
                    };
                };
            };
        };
        put?: never;
        /** Reply to a question */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    questionId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["QuestionReplyCreate"];
                };
            };
            responses: {
                /** @description Reply created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Question"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/hackathons/{hackathonId}/products/{productId}/evaluations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get evaluations for a product in a hackathon */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                    productId: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Product evaluations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Evaluation"][];
                    };
                };
            };
        };
        put?: never;
        /** Create an evaluation for a product in a hackathon */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    hackathonId: number;
                    productId: number;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EvaluationCreate"];
                };
            };
            responses: {
                /** @description Evaluation created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Evaluation"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            id: string;
            name?: string | null;
            /** Format: email */
            email: string;
            /** Format: date-time */
            emailVerified?: string | null;
            image?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        UserCreate: {
            name?: string | null;
            /** Format: email */
            email: string;
            image?: string | null;
        };
        UserUpdate: {
            name?: string | null;
            /** Format: email */
            email?: string;
            image?: string | null;
        };
        UserData: {
            userId: string;
            userName: string;
            affiliation: string;
            /** Format: email */
            email: string;
            profile: string;
        };
        UserDataUpdate: {
            userName?: string;
            affiliation?: string;
            /** Format: email */
            email?: string;
            profile?: string;
        };
        Account: {
            userId: string;
            type: string;
            provider: string;
            providerAccountId: string;
            refresh_token?: string | null;
            access_token?: string | null;
            expires_at?: number | null;
            token_type?: string | null;
            scope?: string | null;
            id_token?: string | null;
            session_state?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Session: {
            sessionToken: string;
            userId: string;
            /** Format: date-time */
            expires: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Authenticator: {
            credentialID: string;
            userId: string;
            providerAccountId: string;
            credentialPublicKey: string;
            counter: number;
            credentialDeviceType: string;
            credentialBackedUp: boolean;
            transports?: string | null;
        };
        Hackathon: {
            id: number;
            name: string;
            theme: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        HackathonCreate: {
            name: string;
            theme: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
        };
        HackathonUpdate: {
            name?: string;
            theme?: string;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
        };
        Team: {
            id: number;
            hackathonId: number;
            name: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        TeamCreate: {
            name: string;
        };
        TeamMember: {
            userId: string;
            hackathonId: number;
            teamId: number;
        };
        TeamMemberCreate: {
            userId: string;
            hackathonId: number;
        };
        Prize: {
            id: number;
            hackathonId: number;
            name: string;
            description: string;
        };
        PrizeCreate: {
            name: string;
            description: string;
        };
        TechnologyStack: {
            id: number;
            name: string;
        };
        TechnologyStackCreate: {
            name: string;
        };
        UserTechnologyStack: {
            userId: string;
            technologyStackId: number;
            /** @description Proficiency level from 1 to 5 */
            level: number;
        };
        UserTechnologyStackCreate: {
            technologyStackId: number;
            /** @description Proficiency level from 1 to 5 */
            level: number;
        };
        Product: {
            id: number;
            teamId: number;
            hackathonId: number;
            title: string;
            description: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        ProductCreate: {
            title: string;
            description: string;
        };
        Question: {
            id: number;
            productId: number;
            text: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            replyId?: number | null;
        };
        QuestionCreate: {
            text: string;
        };
        QuestionReplyCreate: {
            text: string;
        };
        Evaluation: {
            userId: string;
            hackathonId: number;
            productId: number;
        };
        EvaluationCreate: {
            userId: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
